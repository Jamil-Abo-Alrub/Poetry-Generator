import streamlit as st
from model_loader import load_model_and_tokenizer
from text_generator import generate_text
from config import DEFAULT_TEMPERATURE, MODEL_PATH, TOKENIZER_PATH # Pour v√©rifier l'existence
import os

# --- Interface Utilisateur de l'Application Streamlit ---
st.set_page_config(page_title="G√©n√©rateur de Po√©sie", layout="wide") # MODIFI√â
st.title("üìú Compagnon de Po√©sie IA üñãÔ∏è") # MODIFI√â
# MODIFI√â - Supposant que vous utiliserez un mod√®le entra√Æn√© sur un corpus fran√ßais
st.markdown("Entra√Æn√© sur un corpus de po√©sie fran√ßaise. Utilisez les options ci-dessous pour g√©n√©rer ou compl√©ter des po√®mes.")


# --- Charger le Mod√®le et le Tokenizer ---
# Ceci sera mis en cache par st.cache_resource dans model_loader
model, tokenizer, MAX_SEQ_LEN_FOR_PADDING = load_model_and_tokenizer()



if model and tokenizer and MAX_SEQ_LEN_FOR_PADDING > 0:
    st.sidebar.header("Param√®tres de G√©n√©ration") # MODIFI√â
    temperature = st.sidebar.slider(
        "Temp√©rature (Cr√©ativit√©)", # MODIFI√â
        min_value=0.1,
        max_value=1.5,
        value=DEFAULT_TEMPERATURE,
        step=0.1,
        help="Les valeurs basses rendent le r√©sultat plus pr√©visible ; les valeurs hautes le rendent plus al√©atoire et cr√©atif." # MODIFI√â
    )

    # MODIFI√â - √âtiquettes des onglets en fran√ßais
    tab1, tab2 = st.tabs(["‚úíÔ∏è G√©n√©rer un Po√®me Court", "‚úçÔ∏è Compl√©ter un Vers"])

    with tab1:
        st.header("G√©n√©rer un Po√®me Court") # MODIFI√â
        st.markdown("Fournissez une phrase de d√©part (texte d'amorce) et laissez l'IA la continuer.") # MODIFI√â
        
        seed_input_poem = st.text_input(
            "Entrez votre phrase d'amorce pour le po√®me :", # MODIFI√â
            "La vieille maison se dressait sur la colline", # MODIFI√â - Exemple en fran√ßais
            key="seed_poem"
        )
        num_words_poem = st.slider(
            "Nombre de mots √† g√©n√©rer pour le po√®me :", # MODIFI√â
            min_value=10,
            max_value=300,
            value=50,
            key="len_poem"
        )

        if st.button("Composer le Po√®me", key="btn_poem"): # MODIFI√â
            if not seed_input_poem.strip():
                st.warning("Veuillez entrer une phrase d'amorce pour commencer le po√®me.") # MODIFI√â
            else:
                with st.spinner("L'IA compose votre po√®me... ‚ú®"): # MODIFI√â
                    generated_content = generate_text(
                        model,
                        tokenizer,
                        seed_input_poem,
                        num_words_poem,
                        MAX_SEQ_LEN_FOR_PADDING, 
                        temperature
                    )
                    st.subheader("Votre Po√®me G√©n√©r√© par l'IA :") # MODIFI√â
                    st.markdown(f"> {generated_content}")

    with tab2:
        st.header("Compl√©ter un Vers de Po√©sie") # MODIFI√â
        st.markdown("Entrez un vers de po√©sie incomplet, et l'IA essaiera de le compl√©ter.") # MODIFI√â

        seed_input_line = st.text_input(
            "Entrez le vers incomplet :", # MODIFI√â
            "Dans les champs verts, o√π les ombres", # MODIFI√â - Exemple en fran√ßais
            key="seed_line"
        )
        num_words_line = st.slider(
            "Nombre de mots √† ajouter pour la compl√©tion :", # MODIFI√â
            min_value=3,
            max_value=50,
            value=10,
            key="len_line"
        )

        if st.button("Compl√©ter le Vers", key="btn_line"): # MODIFI√â
            if not seed_input_line.strip():
                st.warning("Veuillez entrer un vers incomplet.") # MODIFI√â
            else:
                with st.spinner("L'IA compl√®te votre vers... ‚úçÔ∏è"): # MODIFI√â
                    completed_content = generate_text(
                        model,
                        tokenizer,
                        seed_input_line,
                        num_words_line,
                        MAX_SEQ_LEN_FOR_PADDING, 
                        temperature
                    )
                    st.subheader("Vers Compl√©t√© :") # MODIFI√â
                    st.markdown(f"> {completed_content}")
    
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"**Informations sur le Mod√®le**") # MODIFI√â
    st.sidebar.markdown(f"Longueur de s√©quence d'entr√©e pour le mod√®le : `{MAX_SEQ_LEN_FOR_PADDING - 1 if MAX_SEQ_LEN_FOR_PADDING > 0 else 'N/A'}`") # MODIFI√â
    st.sidebar.markdown(f"Taille du vocabulaire (tokenizer) : `{len(tokenizer.word_index) if tokenizer else 'N/A'}`") # MODIFI√â

elif not os.path.exists(MODEL_PATH) or not os.path.exists(TOKENIZER_PATH):
    st.error(
        f"Les fichiers du mod√®le ou du tokenizer sont manquants. " # MODIFI√â
        f"Veuillez vous assurer que '{os.path.basename(MODEL_PATH)}' et '{os.path.basename(TOKENIZER_PATH)}' " 
        f"se trouvent dans le m√™me r√©pertoire que l'application apr√®s l'entra√Ænement du mod√®le." # MODIFI√â
    )
    st.info("Vous devez d'abord ex√©cuter votre script d'entra√Ænement pour g√©n√©rer ces fichiers.") # MODIFI√â
else:
    st.error(
        "√âchec du chargement du mod√®le ou du tokenizer. " # MODIFI√â
        "Veuillez v√©rifier la console/le terminal pour les messages d'erreur sp√©cifiques survenus au d√©marrage." # MODIFI√â
    )

if __name__ == '__main__':
    pass